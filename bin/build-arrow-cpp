#!/bin/bash

function is_darwin() {
  case $(uname -s) in
    Darwin)
      return 0
      ;;
  esac
  return 1
}

function is_windows() {
  # TODO
  return 1
}

function expand_path() {
  local d="$1"
  case "$d" in
    /*)
      echo "$d"
      ;;
    *)
      echo $(pwd)/$d
      ;;
  esac
}

function init_env() {
  export ARROW_HOME=$PREFIX
  export ARROW_BUILD_TESTS=ON
  export CMAKE_EXPORT_COMPILE_COMMANDS=ON

  if is_darwin; then
    export OPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1)
    export ARROW_JEMALLOC=ON
    export ARROW_ORC=ON
    export ARROW_FLIGHT=ON
    export ARROW_GANDIVA=ON
    export ARROW_PARQUET=ON
    export ARROW_WITH_ZLIB=ON
    export ARROW_WITH_LZ4=ON
    export ARROW_WITH_BZ2=ON
    export ARROW_WITH_ZSTD=ON
    export ARROW_WITH_SNAPPY=ON
    export ARROW_WITH_BROTLI=ON
  elif is_windows; then
    export CMAKE_ARGS="-A x64"
    export CMAKE_GENERATOR="Visual Studio 16 2019"
    export CMAKE_INSTALL_LIBDIR=bin
    export CMAKE_INSTALL_PREFIX=$PREFIX
    export ARROW_FLIGHT=OFF
    export ARROW_PARQUET=OFF
    export ARROW_WITH_ZLIB=OFF
    export ARROW_WITH_LZ4=OFF
    export ARROW_WITH_BZ2=OFF
    export ARROW_WITH_ZSTD=OFF
    export ARROW_WITH_SNAPPY=OFF
    export ARROW_WITH_BROTLI=OFF
    export ARROW_USE_GLOG=OFF
    export ARROW_BUILD_SHARED=ON
    export ARROW_BUILD_STATIC=OFF
    export ARROW_BOOST_USE_SHARED=OFF
    export ARROW_VERBOSE_THIRDPARTY_BUILD=OFF
    export BOOST_SOURCE=BUNDLED
  else # Assume ubuntu 18.04
    export ARROW_DEPENDENCY_SOURCE=SYSTEM
    export ARROW_FLIGHT=OFF
    export ARROW_GANDIVA=ON
    export ARROW_HDFS=ON
    export ARROW_INSTALL_NAME_RPATH=OFF
    export ARROW_NO_DEPRECATED_API=ON
    export ARROW_ORC=ON
    export ARROW_PARQUET=ON
    export ARROW_PLASMA=ON
    export ARROW_USE_ASAN=OFF
    export ARROW_USE_CCACHE=ON
    export ARROW_USE_UBSAN=OFF
    export ARROW_WITH_BROTLI=ON
    export ARROW_WITH_BZ2=ON
    export ARROW_WITH_LZ4=ON
    export ARROW_WITH_SNAPPY=ON
    export ARROW_WITH_ZLIB=ON
    export ARROW_WITH_ZSTD=ON
    export GTest_SOURCE=BUNDLED
    export ORC_SOURCE=BUNDLED
    export PARQUET_BUILD_EXECUTABLE=ON
    export PARQUET_BUILD_EXAMPLES=ON
    export Thrift_SOURCE=BUNDLED
  fi
}

function run_cmake() {
  if is_darwin; then
    export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
    #export BOOST_ROOT=$(brew --prefix boost)
    ARROW_BOOST_VENDORED=ON
    export LLVM_ROOT=$(brew --prefix llvm)
    export CLANG_TOOLS_PATH=$(brew --prefix llvm)/bin
    export gRPC_ROOT=$(brew --prefix grpc)
    export RE2_ROOT=$(brew --prefix re2)
    export THRIFT_ROOT=$(brew --prefix thrift)
    PYTHON=$(which ${PYTHON:-$(brew --prefix python3)/bin/python3})
    ARROW_FLIGHT=ON
  fi

  if [ ! -d ${ARROW_CPP_BUILD_DIR} ]; then
    mkdir -p ${ARROW_CPP_BUILD_DIR}
  fi

  if [ "$CLANG" == 1 ]; then
    if is_darwin; then
      export PATH=$CLANG_TOOLS_PATH:$PATH
      CC=clang
      CXX=clang++
    else
      CC=clang-7
      CXX=clang++-7
    fi
  fi

  if [ "$GCC" == 1 ]; then
    CC=gcc
    CXX=g++
  fi

  pushd ${ARROW_CPP_BUILD_DIR}
  cmake ${LOGLEVEL:+--log-level=${LOGLEVEL}} \
        -G "${CMAKE_GENERATOR:-Ninja}" \
        -DARROW_BOOST_USE_SHARED=${ARROW_BOOST_USE_SHARED:-ON} \
        -DARROW_BUILD_BENCHMARKS=${ARROW_BUILD_BENCHMARKS:-OFF} \
        -DARROW_BUILD_EXAMPLES=${ARROW_BUILD_EXAMPLES:-OFF} \
        -DARROW_BUILD_INTEGRATION=${ARROW_BUILD_INTEGRATION:-OFF} \
        -DARROW_BUILD_SHARED=${ARROW_BUILD_SHARED:-ON} \
        -DARROW_BUILD_STATIC=${ARROW_BUILD_STATIC:-ON} \
        -DARROW_BUILD_TESTS=${ARROW_BUILD_TESTS:-OFF} \
        -DARROW_BUILD_UTILITIES=${ARROW_BUILD_UTILITIES:-ON} \
        -DARROW_COMPUTE=${ARROW_COMPUTE:-ON} \
        -DARROW_CSV=${ARROW_CSV:-ON} \
        -DARROW_CUDA=${ARROW_CUDA:-OFF} \
        -DARROW_CXXFLAGS=${ARROW_CXXFLAGS:-} \
        -DARROW_DATASET=${ARROW_DATASET:-ON} \
        -DARROW_DEPENDENCY_SOURCE=${ARROW_DEPENDENCY_SOURCE:-AUTO} \
        -DARROW_EXTRA_ERROR_CONTEXT=${ARROW_EXTRA_ERROR_CONTEXT:-OFF} \
        -DARROW_ENABLE_TIMING_TESTS=${ARROW_ENABLE_TIMING_TESTS:-ON} \
        -DARROW_FILESYSTEM=${ARROW_FILESYSTEM:-ON} \
        -DARROW_FLIGHT=${ARROW_FLIGHT:-OFF} \
        -DARROW_FUZZING=${ARROW_FUZZING:-OFF} \
        -DARROW_GANDIVA_JAVA=${ARROW_GANDIVA_JAVA:-OFF} \
        -DARROW_GANDIVA_PC_CXX_FLAGS=${ARROW_GANDIVA_PC_CXX_FLAGS:-} \
        -DARROW_GANDIVA=${ARROW_GANDIVA:-OFF} \
        -DARROW_HDFS=${ARROW_HDFS:-ON} \
        -DARROW_HIVESERVER2=${ARROW_HIVESERVER2:-OFF} \
        -DARROW_INSTALL_NAME_RPATH=${ARROW_INSTALL_NAME_RPATH:-ON} \
        -DARROW_JEMALLOC=${ARROW_JEMALLOC:-ON} \
        -DARROW_JNI=${ARROW_JNI:-OFF} \
        -DARROW_JSON=${ARROW_JSON:-ON} \
        -DARROW_LARGE_MEMORY_TESTS=${ARROW_LARGE_MEMORY_TESTS:-OFF} \
        -DARROW_MIMALLOC=${ARROW_MIMALLOC:-OFF} \
        -DARROW_NO_DEPRECATED_API=${ARROW_NO_DEPRECATED_API:-OFF} \
        -DARROW_ORC=${ARROW_ORC:-OFF} \
        -DARROW_PARQUET=${ARROW_PARQUET:-OFF} \
        -DARROW_PLASMA_JAVA_CLIENT=${ARROW_PLASMA_JAVA_CLIENT:-OFF} \
        -DARROW_PLASMA=${ARROW_PLASMA:-OFF} \
        -DARROW_PYTHON=${ARROW_PYTHON:-OFF} \
        -DARROW_S3=${ARROW_S3:-OFF} \
        -DARROW_TEST_LINKAGE=${ARROW_TEST_LINKAGE:-shared} \
        -DARROW_TEST_MEMCHECK=${ARROW_TEST_MEMCHECK:-OFF} \
        -DARROW_USE_ASAN=${ARROW_USE_ASAN:-OFF} \
        -DARROW_USE_CCACHE=${ARROW_USE_CCACHE:-ON} \
        -DARROW_USE_GLOG=${ARROW_USE_GLOG:-ON} \
        -DARROW_USE_LD_GLOG=${ARROW_USE_LD_GLOG:-OFF} \
        -DARROW_USE_PRECOMPILED_HEADERS=${ARROW_USE_PRECOMPILED_HEADERS:-OFF} \
        -DARROW_USE_STATIC_CRT=${ARROW_USE_STATIC_CRT:-OFF} \
        -DARROW_USE_UBSAN=${ARROW_USE_UBSAN:-OFF} \
        -DARROW_VERBOSE_THIRDPARTY_BUILD=${ARROW_VERBOSE_THIRDPARTY_BUILD:-OFF} \
        -DARROW_WITH_BROTLI=${ARROW_WITH_BROTLI:-OFF} \
        -DARROW_WITH_BZ2=${ARROW_WITH_BZ2:-OFF} \
        -DARROW_WITH_LZ4=${ARROW_WITH_LZ4:-OFF} \
        -DARROW_WITH_SNAPPY=${ARROW_WITH_SNAPPY:-OFF} \
        -DARROW_WITH_ZLIB=${ARROW_WITH_ZLIB:-OFF} \
        -DARROW_WITH_ZSTD=${ARROW_WITH_ZSTD:-OFF} \
        -Dbenchmark_SOURCE=${benchmark_SOURCE:-AUTO} \
        -DBOOST_SOURCE=${BOOST_SOURCE:-AUTO} \
        -DBrotli_SOURCE=${Brotli_SOURCE:-AUTO} \
        -DBUILD_WARNING_LEVEL=${BUILD_WARNING_LEVEL:-CHECKIN} \
        -Dc-ares_SOURCE=${cares_SOURCE:-AUTO} \
        -DCMAKE_BUILD_TYPE=${ARROW_BUILD_TYPE:-debug} \
        -DCMAKE_C_FLAGS=${CFLAGS:-} \
        -DCMAKE_CXX_FLAGS=${CXXFLAGS:-} \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=${CMAKE_EXPORT_COMPILE_COMMANDS:-OFF} \
        -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR:-lib} \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX:-${ARROW_HOME}} \
        -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD:-OFF} \
        -Dgflags_SOURCE=${gflags_SOURCE:-AUTO} \
        -DgRPC_SOURCE=${gRPC_SOURCE:-AUTO} \
        -DgRPC_ROOT=${gRPC_ROOT:-} \
        -DGTest_SOURCE=${GTest_SOURCE:-AUTO} \
        -DLz4_SOURCE=${Lz4_SOURCE:-AUTO} \
        -DORC_SOURCE=${ORC_SOURCE:-AUTO} \
        -DPARQUET_BUILD_EXECUTABLES=${PARQUET_BUILD_EXECUTABLE:-OFF} \
        -DPARQUET_BUILD_EXAMPLES=${PARQUET_BUILD_EXAMPLES:-OFF} \
        -DPARQUET_REQUIRE_ENCRYPTION=${ARROW_WITH_OPENSSL:-ON} \
        -DProtobuf_SOURCE=${Protobuf_SOURCE:-AUTO} \
        -DPython3_EXECUTABLE=${Python3_EXECUTABLE:-} \
        -DRapidJSON_SOURCE=${RapidJSON_SOURCE:-AUTO} \
        -DRE2_SOURCE=${RE2_SOURCE:-AUTO} \
        -DRE2_ROOT=${RE2_ROOT:-} \
        -DSnappy_SOURCE=${Snappy_SOURCE:-AUTO} \
        -DThrift_SOURCE=${Thrift_SOURCE:-AUTO} \
        -DZSTD_SOURCE=${ZSTD_SOURCE:-AUTO} \
        ${CMAKE_ARGS} \
        ${ARROW_CPP_ROOT}
  popd
}

function run_build() {
  # export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
  cmake --build ${ARROW_CPP_BUILD_DIR}
}

function run_install() {
  # OPENSSL_ROOT_DIR=$(brew --prefix openssl)
  cmake --build ${ARROW_CPP_BUILD_DIR} --target install
}

function help() {
  cat <<HELP
Usage: $0 [OPTIONS] [BUILD_DIR]

Build Arrow C++ library on the build directory specified by BUILD_DIR.
The default build directory is "./build".

OPTIONS:

  --help       Show this message
  --cmake      Run cmake to configure the build environment
  --clang      Use clang
  --gcc        Use gcc
  --coverage   Enable coverage (imply clang)
  --fuzzing    Enable fuzzing (imply coverage and clang)
  --install    Run ninja install
  --no-ccache  Stop using ccache
  --prefix     Specify the prefix directory to install
  --release    Release build (the default is debug build)

HELP
}

ARGS=()
RUN_CMAKE=0
RUN_INSTALL=0
PREFIX=/opt/arrow-dev
BUILD_JOBS=6
ARROW_CPP_ROOT=$(pwd)
ARROW_CPP_BUILD_DIR=${ARROW_CPP_ROOT}/build
ARROW_BUILD_TYPE=debug
ARROW_USE_CCACHE=ON
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help)
      help
      exit
      ;;
    --cmake)
      RUN_CMAKE=1
      ;;
    --clang)
      CLANG=1
      ;;
    --gcc)
      GCC=1
      ;;
    --coverage)
      ARROW_GENERATE_COVERAGE=ON
      ;;
    --fuzzing)
      ARROW_FUZZING=ON
      ;;
    --install)
      RUN_INSTALL=1
      ;;
    --no-ccache)
      ARROW_USE_CCACHE=OFF
      ;;
    --prefix)
      shift
      PREFIX="$1"
      ;;
    --release)
      ARROW_BUILD_TYPE=release
      ;;
    --verbose)
      LOGLEVEL=VERBOSE
      ;;
    *)
      ARGS+=("$1")
      ;;
  esac
  shift
done

if [ -n "${ARGS[0]}" ]; then
  ARROW_CPP_BUILD_DIR=$(expand_path "${ARGS[0]}")
  if [ ! -d $ARROW_CPP_BUILD_DIR ]; then
    mkdir -p $ARROW_CPP_BUILD_DIR
  fi
fi

if [ "$ARROW_FUZZING" == "ON" ]; then
  ARROW_GENERATE_COVERAGE=ON
fi

if [ "$ARROW_GENERATE_COVERAGE" == "ON" ]; then
  CLANG=1
  GCC=0
fi

if [ -z "$GCC" -a -z "$CLANG" ]; then
  : do nothing
elif [ "$GCC" == 1 -a -z "$CLANG" == 1 ]; then
  echo "--gcc and --clang cannot be specified at the same time" 1>&2
  exit 1
fi

set -ex

init_env

if [ "$RUN_CMAKE" == 1 ]; then
  run_cmake
fi

run_build

if [ "$RUN_INSTALL" == 1 ]; then
  run_install
fi
