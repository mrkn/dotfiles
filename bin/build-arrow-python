#!/bin/bash

function is_darwin() {
  case $(uname -s) in
    Darwin)
      return 0
      ;;
  esac
  return 1
}

function expand_path() {
  local d="$1"
  case "$d" in
    /*)
      echo "$d"
      ;;
    *)
      if [ -d $(pwd)/$d ]; then
        echo $(cd $(pwd)/$d; pwd)
      else
        echo $(pwd)/$d
      fi
      ;;
  esac
}

PYTHON=${PYTHON:-python3}

function run_build() {
  local build_dir="$1"

  if is_darwin; then
    PKG_CONFIG_PATH=$(brew --prefix libffi)/lib/pkgconfig:$PKG_CONFIG_PATH
  fi
  export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
  export ARROW_HOME=$PREFIX
  export PARQUET_HOME=$PREFIX
  export LD_LIBRARY_PATH=${ARROW_HOME}/lib:${LD_LIBRARY_PATH}

  export PYARROW_CMAKE_GENERATOR=Ninja
  export PYARROW_BUILD_TYPE=debug
  export PYARROW_WITH_S3=${ARROW_S3:-ON}
  export PYARROW_WITH_ORC=${ARROW_ORC:-ON}
  export PYARROW_WITH_CUDA=${ARROW_CUDA:-OFF}
  export PYARROW_WITH_HDFS=${ARROW_HDFS:-OFF}
  export PYARROW_WITH_FLIGHT=${ARROW_FLIGHT:-OFF}
  export PYARROW_WITH_PLASMA=${ARROW_PLASMA:-OFF}
  export PYARROW_WITH_GANDIVA=${ARROW_GANDIVA:-ON}
  export PYARROW_WITH_PARQUET=${ARROW_PARQUET:-ON}
  export PYARROW_WITH_DATASET=${ARROW_DATASET:-ON}

  if [ "$INPLACE_BUILD" == 1 ]; then
    $PYTHON setup.py build_ext --inplace \
                     install --single-version-externally-managed \
                             --record record.txt
  else
    local relative_build_dir=$(realpath --relative-to=. $build_dir)

    $PYTHON setup.py build --build-base $build_dir \
                     install --single-version-externally-managed \
                             --record $relative_build_dir/record.txt
  fi
}

PYARROW_PYTEST_FLAGS="-r s --capture=no"

function run_test() {
  local python=$PYTHON

  export PYTHONDEVMODE=1

  if is_darwin; then
    python="run-arrow-dev --prefix $PREFIX -- $python"
  fi

  if [[ $# -gt 0 ]]; then
    $python -m pytest $PYARROW_PYTEST_FLAGS --pyargs "$@"
  else
    $python -m pytest $PYARROW_PYTEST_FLAGS --pyargs pyarrow
  fi
}

function help() {
  cat <<HELP
Usage: $0 [OPTIONS]

Build Arrow Python library.

OPTIONS:

  --help       Show this message
  --build      Build Arrow Python
  --test       Run test of Arrow Python
  --release    Release build (the default is debug build)
  --prefix     Specify the prefix directory to install
  --cpp-build-dir=DIR   Specify Arrow C++ build directory

HELP
}

ARROW_PYTHON_ROOT=$(pwd)
ARROW_CPP_ROOT=$(cd ${ARROW_PYTHON_ROOT}/../cpp pwd)
ARROW_CPP_BUILD_DIR=${ARROW_CPP_BUILD_DIR}/build
RUN_BUILD=0
INPLACE_BUILD=0
RUN_TEST=0
PREFIX=/opt/arrow-dev

ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help)
      help
      exit
      ;;
    --cpp-build-dir=*)
      ARROW_CPP_BUILD_DIR=$(echo "$1" | sed -e "s/--cpp-build-dir=//")
      ARROW_CPP_BUILD_DIR=$(cd ${ARROW_CPP_BUILD_DIR}; pwd)
      shift
      ;;
    --prefix)
      shift
      PREFIX="$1"
      shift
      ;;
    --release)
      export PYARROW_BUILD_TYPE=release
      shift
      ;;
    --build)
      RUN_BUILD=1
      shift
      ;;
    --inplace)
      INPLACE_BUILD=1
      shift
      ;;
    --test)
      RUN_TEST=1
      shift
      ;;
    *)
      ARGS+=("$1")
      shift
      ;;
  esac
done

if [ -n "${ARGS[0]}" ]; then
  build_dir=$(expand_path "${ARGS[0]}")
  if [ ! -d $build_dir ]; then
    mkdir -p $build_dir
  fi
elif [ "$INPLACE_BUILD" == 0 ]; then
  build_dir=$(expand_path build)
  mkdir -p $build_dir
fi

if [ "$RUN_BUILD" == 0 -a "$RUN_TEST" == 0 ]; then
  RUN_BUILD=1
fi

set -ex

if [ "$RUN_BUILD" == 1 ]; then
  run_build $build_dir
fi

if [ "$RUN_TEST" == 1 ]; then
  run_test "${ARGS}"
fi
