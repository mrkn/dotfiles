# vimproc

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# quickrun

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
      \ '_' : {
          \ 'runner' : 'vimproc',
          \ 'runner/vimproc/updatetime' : 40,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error' : 'quickfix',
          \ 'outputter/buffer/split' : ':botright 8sp',
      \ }
  \ }

  let g:quickrun_no_default_key_mappings = 1
  nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

# deoplete

[[plugins]]
repo = 'Shougo/deoplete.nvim'
#if = 'has("nvim")'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

# denite

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [denite] <Nop>
  nmap <C-u> [denite]
  nnoremap <silent> [denite]<C-t> :<C-u>Denite filetype<CR>
  nnoremap <silent> [denite]<C-p> :<C-u>Denite file_rec<CR>
  nnoremap <silent> [denite]<C-j> :<C-u>Denite line<CR>
  nnoremap <silent> [denite]<C-g> :<C-u>Denite grep<CR>
  nnoremap <silent> [denite]<C-]> :<C-u>DeniteCursorWord grep<CR>
  nnoremap <silent> [denite]<C-r> :<C-u>Denite -resume<CR>
'''
hook_post_source = '''
  call denite#custom#var('file/rec', 'command', ['pt', '--follow', '--nocolor', --nogroup', '-g', ''])
  call denite#custom#var('grep', 'command', ['pt'])
  call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')

  call denite#custom#option('default', 'prompt', '>')

  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/',
        \   '.ropeproject/', '__pycache__/', '.venv', 'venv/',
        \   'images/', '*.min.*', 'img/', 'fonts/'
        \ ])
'''

# git

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# lightline

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste' ],
      \     [ 'gitbranch', 'readonly', 'filename', 'modified' ]
      \   ],
      \   'right': [
      \     [ 'lineinfo' ],
      \     [ 'percent' ],
      \     [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ]
      \   ]
      \ },
      \ 'component': {
      \   'charvaluehex': '0x%B'
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
'''

# toml

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# julia

[[plugins]]
repo = 'JuliaEditorSupport/julia-vim'
on_ft = ['julia']

# ruby

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby']

[[plugins]]
repo = 'mrkn/vim-cruby'

# rust

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
if has('mac')
  let g:rust_clip_command = 'pbcopy'
else " assume Linux
  let g:rust_clip_command = 'xclip -selection clipboard'
end
'''

# terraform

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'javascript']

# wakatime

[[plugins]]
repo = 'wakatime/vim-wakatime'

# mrkn256
[[plugins]]
repo = 'mrkn/mrkn256.vim'

# Solarized

[[plugins]]
repo = 'altercation/vim-colors-solarized'

# Tomorrow

[[plugins]]
repo = 'chriskempson/tomorrow-theme'
rtp = 'vim'

# nerdtree

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  autocmd VimEnter * execute 'NERDTree'
'''

# coc
#[[plugins]]
#repo = 'neoclide/coc.nvim'
#merged = 0
#rev = 'release'
#on_i = 1
#hook_add = '''
#" Use tab for trigger completion with caracters ahead and navigate.
#" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
#inoremap <silent><expr> <TAB>
#      \ pumvisible() ? "\<C-n>" :
#      \ <SID>check_back_space() ? "\<TAB>" :
#      \ coc#refresh()
#inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
#
#function! s:check_back_space() abort
#  let col = col('.') - 1
#  return !col || getline('.')[col - 1] =~# '\s'
#endfunction
#
#" Use <c-space> to trigger comletion
#inoremap <silent><expr> <c-space> coc#refresh()
#
#" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
#" Coc only does snippet and additional edit on confirm.
#inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
#
#" Use `[g` and `]g` to navigate diagnostics
#nmap <silent> [g <Plug>(coc-diagnostic-prev>
#nmap <silent> ]g <Plug>(coc-diagnostic-next>
#
#" Remap keys for gotos
#nmap <silent> gd <Plug>(coc-definition)
#nmap <silent> gy <Plug>(coc-type-definition)
#nmap <silent> gi <Plug>(coc-implementation)
#nmap <silent> gr <Plug>(coc-references)
#
#" Use K to show documentation in preview window
#nnoremap <silent> K :call <SID>show_documentation()<CR>
#
#function! s:show_documentation()
#  if (index(['vim', 'help'], &filetype) >= 0)
#    execute 'h '.expand('<cword>')
#  else
#    call CocAction('doHover')
#  endif
#endfunction
#
#" Highlight symbol under cursor on CursorHold
#autocmd CursorHold * silent call CocActionAsync('highlight')
#
#" Remap for rename current word
#nmap <leader>rn <Plug>(coc-rename)
#'''

# denite-gtags
[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
nnoremap <leader>a :DeniteCursorWord -buffer-name=gtags_context gtags_context<CR>
nnoremap <leader>d :DeniteCursorWord -buffer-name=gtags_def gtags_def<CR>
nnoremap <leader>r :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<CR>
nnoremap <leader>g :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<CR>
nnoremap <leader>t :Denite -buffer-name=gtags_completion gtags_completion<CR>
nnoremap <leader>f :Denite -buffer-name=gtags_file gtags_file<CR>
nnoremap <leader>F :Denite -buffer-name=gtags_files gtags_files<CR>
nnoremap <leader>p :Denite -buffer-name=gtags_path gtags_path<CR>
'''

# etc.

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'tpope/vim-surround'
